팀 규모와 제한된 자본을 고려하여, 비용 부담이 큰 클라우드 서비스 사용은 자제하고 물리 서버 기반으로 오픈 소스 중심의 시스템을 구성할 계획입니다.

초기 단계에서는 개발 속도와 운영 단순성을 우선시하며, 확장성을 고려해 모듈러 모놀리식 아키텍처를 적용합니다.
이를 위해 레이어별로 모듈을 나누고, 필요한 모듈 간에 느슨한 의존성을 유지하며 서비스를 구축합니다.
또한, 외부 요청은 웹 모듈에서 받아 플랫폼을 제공하고, API 모듈에서 CRUD 작업을 처리하는 구조로 설계합니다.

보안 강화를 위해 인증과 권한 관리 시 Spring Security의 CSRF 및 CORS 정책을 적용합니다.
JWT를 이용해 사용자 인증과 인가를 처리하며, Spring Validation으로 요청 받은 데이터 검증 절차를 추가합니다.
또한, JPQL이나 Native Query 사용을 최소화하여 SQL Injection 공격을 방지할 예정입니다.

성능 개선을 위해 CRUD 작업이 가능한 인덱스를 활용하도록 DB 스키마를 설계하고,
과도한 데이터 통신을 방지하기 위해 API에 페이징과 필터링을 기본적으로 적용할 예정입니다.

GitHub를 이용해 소스 및 버전을 관리하고, GitHub Actions로 Pull Request가 병합될 때마다
Docker Hub에 최신 도커 이미지를 빌드하여, k3s 환경에 배포하는 CI/CD를 구축할 계획입니다.

[예상 기술 스택]
API
- 개발 언어: Java
- 프레임워크: Spring Boot  
- 데이터베이스: MySQL  
- ORM: Spring Data JPA + Hibernate  
- 빌드 도구: Gradle (Groovy DSL)  
- API 문서화: SpringDoc OpenAPI (Swagger)

WEB
- 개발 언어: JavaScript(TypeScript 전환 고려)
- 프레임워크: React
- 개발 및 빌드 환경: Node.js
- 패키지 매니저: npm
- API 통신: Axios